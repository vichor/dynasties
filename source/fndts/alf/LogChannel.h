// Foundations library (alf-another logging facility)): LogChannel -*- C++ -*-

// Copyright (C) 2009
// Victor Garcia Santos
//
// This file was developed as part of the Dynasties game. This library is 
// intended for personal use only; you cannot redistribute it and/or use it in 
// your own program.

/** 
 *  \file LogChannel.h
 *  \author Victor Garcia <vichor@gmail.com>
 *  \brief  The ALF LogChannel class header file.
**/

/* Avoid multiple inclusions */
#pragma once

/* Include files */
#include "Logger.h"
#include "os/thread/MutexThread.h"
#include <iostream>
#include <string>
#include <sstream>

/* Namespace definition and forward declarations */
namespace fndts { namespace alf { class LogChannel; } }

/** 
 *  \ingroup alf
 *  \brief The channel where the logs are issued to. 
 *
 *  The %LogChannel class acts as an output channel for the errors, warnings and
 *  logs generated by a program. 
 *
 *  This class, has to be instantiated from the Logger class, so the constructor
 *  is hidden to the user. This instantiation requires two parameters:
 *
 *  - %Log channel name
 *  - %Log channel level [optional, default to 0]
 *
 *  To request an error report, the user will call the error() method. 
 *  Similarly, to request a warning report, the user will call the warning() 
 *  method and to request a log report, the log() method.
 *
 *  The log() method takes two parameters:
 *
 *  - The level of the log to issue.
 *  - The log itself.
 *
 *  The %LogChannel class provides a log filter implemented by a level. If the 
 *  level of the requested log is lower than the channel log level, the log will
 *  be filtered out and not issued.
 *
 *  If a log is to be issued, a Log object is internally created with all the
 *  needed information of the log, and sent to the Logger object through a 
 *  common Queue. Logger object is the one who actually will output the log.
 *
 *  A second way to issue a log is using the &lt;&lt; operator over a reference
 *  to a %LogChannel object. In this case, the log will be issued using the 
 *  %LogChannel's default log level. 
 *
 *  Unless changed, the %LogChannel's default log level is 0. Use the method
 *  setDefaultLogLevel() to change it.
 *
 *  Errors and warnings are issued to the Logger object only when their control
 *  flags in the %LogChannel object are active. Use the methods setErrorFlag() 
 *  and setWarningFlag() to modify these flags.
 *
 *  This class mutexes all accesses to its internals to guarantee correct 
 *  behavior when the same %LogChannel is used from different threads.
 *
 *  Example:
 *  \code
 *  LogChannel lc = Logger.openLogChannel("example channel",0);
 *  lc << "This is a log issued with the default log level.\n";
 *  \endcode
 *
**/
class fndts::alf::LogChannel
{
    private:
        static comms::Channel & channel; /* Channel to send/received logs */
        unsigned int level;     /* Log level for the channel */
        int deflev;             /* Default log level for logs issued */
        std::string name;       /* Name of the log channel */
        bool wflag, eflag;      /* Warning and error flags */
        std::stringstream logstream;    /* Stream for the << operator */
        fndts::os::MutexThread mutex;   /* Mutex the access to attributes */

        /** 
         *  \brief Constructor by name and level.
         *
         *  Creates new %LogChannel object with the given name and log level.
         *  This log level will be used also to configure the default log
         *  level, to ensure that logs issued with the alf::operator&lt;&lt;
         *  arise. The user may change this default log level later using the
         *  method LogChannel::setDefaultLogLevel.
         *
         *  The created %LogChannel will have active both the warning and the
         *  error flags.
         *
         *  \param n Name of the log channel.
         *  \param l Level of the log channel.
        **/
        LogChannel(const std::string n, const unsigned int l);

        /** 
         *  \brief Destroys a log channel object.  
        **/
        ~LogChannel();

        /**
         *  \brief  Actual implementation of the << operator. It is placed here
         *          to hide it from the template operator implementation (which
         *          must be placed in the header file).
        **/
        void doInsertInStreamOp ();

    public:
        /**
         *  \brief Requests this channel to issue a log.
         *
         *  This method receives a log to be issued through the channel. This
         *  will be done only if the channel level is lower than the level of
         *  the received log (or, if the log has greater or equal level than
         *  the channel). Currently, the logs are issued to the standard error
         *  stream.
         *
         *  If no log level is indicated, the default log level will be used.
         *
         *  \param l Level of the requested log.
         *  \param log Text of the requested log.
         *
         *  \return true when the log was issued; false otherwise.
        **/
        const bool log(const unsigned int l, const std::string & log);

        /**
         *  \brief  Requests this channel to issue a log using the default log 
         *          level.
         *  \param log Text of the requested log.
        **/
        const bool log(const std::string & log);

        /**
         *  \brief  Issue an error to the log channel.
         *
         *  This method receives a log to be treated as an error. The error 
         *  will be issue only if the error flag is set.
         *
         *  \param  e   Error to be issued.
         *
         *  \return true when the error was issued; false otherwise.
        **/
        const bool error(const std::string & e);

        /**
         *  \brief  Issue a warning to the log channel.
         *
         *  This method receives a log to be treated as an error. The warning 
         *  will be issue only if the warning flag is set.
         *
         *  \param  w   Warning to be issued.
         *
         *  \return true when the log was issued; false otherwise.
        **/
        const bool warning(const std::string & w);


        /** 
         *  \brief Returns the default log level that logs will have if no level
         *         is specified (i.e. using alf::operator&lt;&lt;).
         *  \param l New log level to set to the default log level of the
         *           %LogChannel object.
        **/
        inline void setDefaultLogLevel(const int l)
        { mutex.lock(); deflev = l; mutex.unlock(); }

        /** 
         *  \brief Returns the default log level that logs will have if no level
         *        is specified (i.e. using alf::operator&lt;&lt;).
         *  \return An integer containing the log level.
        **/
        inline int getDefaultLogLevel() const
        { return deflev; }

        /** 
         *  \brief Sets the log level of the %LogChannel object. 
         *  \param l New log level to set to the %LogChannel object.
        **/
        inline void setLogLevel(const int l)
        { mutex.lock(); level = l; mutex.unlock(); }

        /** 
         * \brief Returns the log level of the %LogChannel object. 
         * \return An integer containing the log level.
        **/
        inline int getLogLevel() const
        { return level; }

        /**
         *  \brief  Gets the error flag.
         *  \return The error flag.
        **/
        inline const bool getErrorFlag() const
        { return eflag; }

        /**
         *  \brief  Sets the error flag.
         *  \param  e   New error flag.
        **/
        inline void setErrorFlag(const bool e)
        { mutex.lock(); eflag = e; mutex.unlock(); }

        /**
         *  \brief  Gets the warning flag.
         *  \return  The warning flag.
        **/
        inline const bool getWarningFlag() const
        { return wflag; }

        /**
         *  \brief  Sets the warning flag.
         *  \param  w   New warning flag.
        **/
        inline void setWarningFlag(const bool w)
        { mutex.lock(); wflag = w; mutex.unlock(); }

        /**
         *  \brief Gets the name of the log channel.
         *  \return A string containing the name of the log channel.
        **/
        inline const std::string getName() const
        { return name; }

        /**
         *  \brief  Operator &lt;&lt; to insert a log in the %LogChannel using
         *          the default log level.
         *  \param  chan    The %LogChannel.
         *  \param  l       The log
         *  \return The %LogChannel with the new log inserted.
         *
         *  This operator builds a log and issues it only if it contains a new
         *  line character. The characters beyond the last new line won't be 
         *  issued, they will remain in the buffer until a new line is found in 
         *  subsequent calls.
        **/
        template <typename Type>
        LogChannel & operator << (Type l)
        {
            /* 
             *  Why do I need to insert logstream.str()? It is supposed to be
             *  already there!
             */
            this->mutex.lock();
            this->logstream << this->logstream.str() << l;
            this->doInsertInStreamOp();
            this->mutex.unlock();
            return *this;
        }
        
        /* Friend declarations. */
        friend class Logger;

};
